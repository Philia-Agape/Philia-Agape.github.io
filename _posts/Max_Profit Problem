

Example:
[6,15,7,11,1,3,16,2]
[19,18,19,16,10,8,19,8]
[2,9,1,19,5,7,3,19]

Example 2:
[341,22,175,424,574,687,952,439,51,562,962,890,250,47,945,914,835,937,419,343,125,809,807,959,403,861,296,39,802,562,811,991,209,375,78,685,592,409,369,478,417,162,938,298,618,745,888,463,213,351,406,840,779,299,90,846,58,235,725,676,239,256,996,362,819,622,449,880,951,314,425,127,299,326,576,743,740,604,151,391,925,605,770,253,670,507,306,294,519,184,848,586,593,909,163,129,685,481,258,764]
[462,101,820,999,900,692,991,512,655,578,996,979,425,893,975,960,930,991,987,524,208,901,841,961,878,882,412,795,937,807,957,994,963,716,608,774,681,637,635,660,750,632,948,771,943,801,985,476,532,535,929,943,837,565,375,854,174,698,820,710,566,464,997,551,884,844,830,916,970,965,585,631,785,632,892,954,803,764,283,477,970,616,794,911,771,797,776,686,895,721,917,920,975,984,996,471,770,656,977,922]
[85,95,14,72,17,3,86,65,50,50,42,75,40,87,35,78,47,74,92,10,100,29,55,57,51,34,10,96,14,71,63,99,8,37,16,71,10,71,83,88,68,79,27,87,3,58,56,43,89,31,16,9,49,84,62,30,35,7,27,34,24,33,100,25,90,79,58,21,31,30,61,46,36,45,85,62,91,54,28,63,50,69,48,36,77,39,19,97,20,39,48,72,37,67,72,46,54,37,53,30]


```cpp
int jobScheduling(vector<int>& start, vector<int>& end, vector<int>& profit) {
        //vector<bool> flag (start.size(), false);
        const int l = start.size(), ll = l*(l-1)/2;
        bool cc[l][l];
        deque<deque<int>> table (l, deque<int> {});
        for(int i=0; i<l; ++i){
           cc[i][i] = false; 
           for(int j=i+1; j<l; ++j){
               //condition of intersection
               if((start[j] >= start[i] && start[j] < end[i]) || 
                  (end[j] > start[i] && end[j] <= end[i])){
                  cc[i][j] = false;
                  cc[j][i] = false; 
               }
               else{
                  cc[i][j] = true;
                  cc[j][i] = true; 
                  table[i].push_back(j);
                  //table[i].push_back(j); why not add?
                  //table record the element with order! 
               }
           } 
        }
        
        int ans = profit[0], loc_sum = 0;
        stack<int> choose = {};
        stack<int> test = {};
        stack<int> tt = {};
        
        for(int i=0; i<l; ++i){
            loc_sum = profit[i]; 
            while(!table[i].empty()){
             
               test = {}; 
               //int temp = table.front();
               for(auto& temp : table[i]){ 
                  
                     tt = test;
                     bool pick = true; 
                     while(!tt.empty()){
                        int tt_top = tt.top();
                        if(!cc[tt_top][temp]){
                            pick = false;
                            break;
                        } 
                     }
                     if(pick){
                        test.push(temp);
                        loc_sum += profit[temp];
                        //ans = (ans < loc_sum) ? loc_sum : ans;  
                        table[i].pop_front();     
                     }  
                  
               }
               ans = (ans < loc_sum) ? loc_sum : ans;  
            }
            ans = (ans < loc_sum) ? loc_sum : ans;  
        }
        
        return ans;
    }        

```

https://scicomp.stackexchange.com/questions/26258/the-easiest-way-to-find-intersection-of-two-intervals


```cpp
 int jobScheduling(vector<int>& start, vector<int>& end, vector<int>& profit) {
        //vector<bool> flag (start.size(), false);
        const int l = start.size(), ll = l*(l-1)/2;
        bool cc[l][l];
        deque<set<int>> table (l, set<int> {});
        for(int i=0; i<l; ++i){
           cc[i][i] = false; 
           for(int j=i+1; j<l; ++j){
               //condition of intersection
               /*if((start[j] >= start[i] && start[j] < end[i]) || 
                  (end[j] > start[i] && end[j] <= end[i])){
                  cc[i][j] = false;
                  cc[j][i] = false; 
               }*/
               if(start[j] >= end[i] || start[i] >= end[j]){
                  cc[i][j] = true;
                  cc[j][i] = true; 
                  table[i].insert(j);
               }
               else{
                  cc[i][j] = false;
                  cc[j][i] = false; 
                  //table[i].insert(j);
                  //table[i].push_back(j); why not add?
                  //table record the element with order! 
               }
           } 
        }
        
        /*for(auto& temp: table[3]){
           cout << temp;
        }*/
        int ans = profit[0], loc_sum = 0, loc_size = 0;
        bool pick = true; 
        //stack<int> choose = {};
        vector<int> test = {};
        //stack<int> tt = {};
        
        for(int i=0; i<l; ++i){
            loc_sum = profit[i];
            //vector<bool> flag (l,false);
            loc_size = 0;
            //while(!table[i].empty()){
               //loc_sum = profit[i]; 
               //tt = test; 
               //test = {};
               set<int>::iterator it = table[i].begin();
               
                //advance(it,loc_size);  
               for(it; it!=table[i].end(); ++it){ 
                  test = {*it};
                  loc_sum = profit[i] + (*it); 
                  set<int>::iterator dd = table[i].begin();
                  advance(dd,1); 
                   for(dd; dd!=table[i].end(); ++dd){   
                     //tt = test;
                     bool pick = true; 
                     for(auto & test_temp : test){
                        //int tt_top = tt.top();
                        if(!cc[test_temp][*dd] ){
                            pick = false;
                            break;
                        } 
                     }
                     //stop tt, determine whether to pick
                        if(pick){
                           loc_sum += profit[*dd];
                           test.push_back(*dd);
                           //table[i].erase(*it); 
                           //++loc_size;   
                        }  
                  }   
               }
               //it = table[i].begin(); 
               //table[i].erase(*it); 
               //++loc_size; 
               ans = (ans < loc_sum) ? loc_sum : ans;
               /*while(!tt.empty()){
                  int tt_top = tt.top();
                  deque<int>::iterator it = find(table[i].begin(), table[i].end(), tt_top);
                  table[i].erase(it);      
               }*/ 
                
            //}
            ans = (ans < loc_sum) ? loc_sum : ans;  
        }
        ans = (ans < loc_sum) ? loc_sum : ans;  
        return ans;
    }        
```


Time Limit Exceed!
```cpp
class Solution {
public:
    void bfs(int index, int loc_max, int* ans, vector<int>& start, vector<int>& end, 
             vector<int>& profit, vector<int>& flag){
       
       if(index == start.size()) return;
        
       bool pick = true; 
       for(auto& it: flag){
          //negation of end[index] <= start[it] || end[it] <= start[index]
           if(end[index] > start[it] && end[it] > start[index]){
              pick = false;
              break; 
           }    
       } 
       
 
       
       if(pick){ 
          flag.push_back(index);
          loc_max += profit[index]; 
          *ans = (*ans > loc_max) ? *ans : loc_max;
          bfs(index+1, loc_max, ans, start, end, profit, flag);
          flag.pop_back(); 
          loc_max -= profit[index];  
       }    
       
       /*if(pick){
          flag.pop_back();   
       }*/ 
       //loc_max -= profit[index]; 
       bfs(index+1, loc_max, ans, start, end, profit, flag);   
       return; 
    }
    
    
    int jobScheduling(vector<int>& start, vector<int>& end, vector<int>& profit) {
        vector<int> flag = {};
        const int l = start.size(), ll = l*(l-1)/2;
        int ans = 0; 
   
        for(int i=0; i<l; ++i){
           bfs(i, 0, &ans, start, end, profit, flag);
        }     
         
        return ans;
    }        
};
```    


